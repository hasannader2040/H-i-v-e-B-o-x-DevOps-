on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'phase4/**'
      

name: phase4_ci pipeline

jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # Should be set to a valid URL, e.g., https://sonar.yourdomain.com
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_PROJECT_KEY: hasannader2040_restful-opensensemap-Api   # Add your project key here
        SONAR_ORGANIZATION: hasannader2040  # Add your organization here

#    - name: SonarQube Quality Gate check
#      id: sonarqube-quality-gate-check
#      uses: sonarsource/sonarqube-quality-gate-action@v1.0.0
#      env:
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#
#    - name: "Show SonarQube Quality Gate Status"
#      run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

  # Integration Testing Job

  integration_tests:
    runs-on: ubuntu-latest
    needs: sonarqube
    services:
      docker:
        image: hassannader2040/temperature-app
        ports:
          - 5000:5000

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: pip install -r phase3/requirements.txt

      - name: Wait for the app to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://127.0.0.1:5000/temperature; then
              echo "Application is ready!"
              break
            fi
            echo "Waiting for the app to be ready..."
            sleep 2
          done

      - name: Show Docker container logs (for debugging)
        if: failure()
        run: docker logs $(docker ps -q --filter ancestor=hassannader2040/temperature-app)

      - name: Run integration tests
        run: pytest test/integration/test_api.py


  # Terrascan Security Scan
  terrascan_job:
    runs-on: ubuntu-latest
    name: terrascan-action
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Run Terrascan
        id: terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'k8s'
          iac_version: 'v1'
          policy_type: 'k8s'
          only_warn: false
          #scm_token: ${{ secrets.ACCESS_TOKEN }}
          #verbose: true
          #sarif_upload: true
          #non_recursive:
          #iac_dir:
          #policy_path:
          #skip_rules:
          #config_path:
          #find_vulnerabilities:
          #webhook_url:
          #webhook_token: