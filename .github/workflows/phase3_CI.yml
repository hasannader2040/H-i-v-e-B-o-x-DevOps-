name: phase3_CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    paths:
      - 'phase3/**'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install flake8
          pip install -r ./phase3/requirements.txt

      # Uncomment this if you want to lint your Dockerfile
      # - name: Lint Dockerfile with Hadolint
      #   run: docker run --rm -v ${{ github.workspace }}/phase3:/workspace hadolint/hadolint hadolint /workspace/Dockerfile

      - name: Lint code
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=myenv,*/pip/_vendor/*
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=myenv,*/pip/_vendor/*

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: |
          cd phase3
          docker build -t hassannader2040/temperature-app .

  # Testing Job
  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      docker:
        image: hassannader2040/temperature-app
        ports:
          - 5000:5000
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: pip install -r phase3/requirements.txt
        
      # Add this to check if tests/ directory exists
      - name: List files
        run: ls -la phase3/

      - name: Install pytest
        run: pip install --upgrade pytest

      

      # Run tests using python -m pytest to ensure correct environment usage
      - name: Run unit tests
        run: python -m pytest phase3/tests/

      # Test the /version endpoint using curl
      - name: Test /version endpoint
        run: |
          curl -s http://127.0.0.1:5000/version | grep "<EXPECTED_VERSION>"


  security:
    runs-on: ubuntu-latest
    needs: [lint, build, test]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Run OpenSSF Scorecard
        uses: ossf/scorecard-action@v2.1.2
        with:
          results_file: results.sarif
          results_format: sarif

      - name: Upload Scorecard results
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif
